# IFrame State Management Refactor Plan

## Context
**Created**: 2024-04-02 17:11
**Updated**: 2024-04-03 14:30

### Current State
The current iframe state management system has several issues:
1. Duplicate state management across multiple contexts
2. Complex state transitions and string manipulation
3. Scattered state logic
4. Over-engineered state types
5. Potential for state inconsistencies

### Goals
1. Simplify state management
2. Improve type safety
3. Enhance performance
4. Better maintainability
5. Easier feature additions

### Refined Requirements
1. IFrame Behavior:
   - Remain mounted once loaded
   - Only unload via menu item longpress
   - No pre-loading, only load on first selection
   - First URL in first group loads initially

2. Error Handling:
   - Clear errors on re-selection
   - Retry loading on re-selection
   - Use existing notification system
   - Show fallback UI for errors

## Implementation Plan

### Phase 1: State Consolidation ✅
#### 1.1 New State Structure
```typescript
interface IframeState {
  urls: Record<string, {
    id: string;
    url: string;
    urlMobile: string | null;
    isLoaded: boolean;    // Tracks if iframe has been loaded
    isVisible: boolean;   // Controls visibility
    error: string | null;
    retryCount: number;   // Tracks retry attempts
  }>;
  activeUrlId: string | null;
  initialUrlId: string | null;  // Tracks first URL for initial load
}
```

#### 1.2 Simplified Actions
```typescript
type IframeAction =
  | { type: 'INIT_URLS'; payload: { urlGroups: UrlGroup[]; initialUrlId: string } }
  | { type: 'SELECT_URL'; payload: { urlId: string } }
  | { type: 'LOAD_URL'; payload: { urlId: string } }
  | { type: 'UNLOAD_URL'; payload: { urlId: string } }
  | { type: 'SET_ERROR'; payload: { urlId: string; error: string | null } };
```

#### 1.3 Files Updated ✅
- [x] `app/lib/state/iframe-state.tsx` (new implementation)
- [x] `app/types/iframe.ts`
- [x] Old context files removed

### Phase 2: Component Updates ✅
#### 2.1 Custom Hooks Implemented
- [x] `useUrlManager` in `app/lib/hooks/useIframe.ts`
- [x] `useIframeLifecycle` in `app/lib/hooks/useIframe.ts`

#### 2.2 Components Updated
- [x] `app/components/url-menu/UrlMenu.tsx`
- [x] `app/components/iframe/IframeContainer.tsx`

### Phase 3: Testing Implementation 🟡
#### 3.1 Current Test Coverage
- [x] Basic state management tests
- [ ] Error handling and recovery tests
- [ ] Longpress unload tests
- [ ] Initial load behavior tests
- [ ] State consistency tests

### Phase 4: Validation 🟡
#### 4.1 Completed Validations
- [x] Fixed iframe reloading issue
- [x] Basic functionality testing

#### 4.2 Pending Validations
- [ ] Iframe mounting behavior
- [ ] Error recovery flows
- [ ] Notification integration
- [ ] State consistency
- [ ] Longpress unload
- [ ] URL parameter handling

### Phase 5: Cleanup ✅
#### 5.1 Completed Tasks
- [x] Removed old state management files
- [x] Cleaned up unused types and interfaces
- [x] Updated documentation
- [x] Removed deprecated hooks

## Progress History

### 2024-04-01 09:00 - Initial Plan Creation
- ✓ Created task directory
- ✓ Documented current state and issues
- ✓ Outlined implementation phases
- ✓ Defined new state structure
- 📚 Added initial documentation
- ⏭️ Next: Begin Phase 1 implementation

### 2024-04-02 17:28 - Plan Refinement
- ✓ Updated state structure for visibility management
- ✓ Simplified action types
- ✓ Added error retry behavior
- ✓ Defined iframe mounting rules
- ✓ Added comprehensive test cases
- ⏭️ Next: Begin implementation of refined state management

### 2024-04-03 10:00 - Core Implementation Complete
- ✓ Created new state management in `iframe-state.tsx`
- ✓ Implemented custom hooks in `useIframe.ts`
- ✓ Updated `IframeContainer` component
- ✓ Updated `UrlMenu` component
- ✓ Added state management tests
- ✓ Added `IframeContainerRef` type
- ⏭️ Next: Begin Phase 5 (Cleanup)

### 2024-04-03 10:30 - Cleanup Progress
- ✓ Removed deprecated state management files
- ✓ Updated UrlMenu.test.tsx to use new state management
- ✓ Updated providers.tsx to use new IframeProvider
- ✓ Updated IframeContainerRefactored.tsx to use new state management
- ✓ Updated MenuBarAdapter.tsx to use new state management
- ✓ Updated useLongPress.ts to use local state instead of context
- ✓ Updated useIframeManager.ts to use new state management
- ✓ Updated DashboardContent.tsx to use new IframeProvider
- 📚 Updated plan documentation

### 2024-04-03 11:00 - State Management Refactor Complete
- ✓ All components updated to use new state management
- ✓ Old context-based state management removed
- ✓ New hooks and providers in place
- ✓ URL management simplified and centralized

### 2024-04-03 11:30 - Test Implementation
- ✓ Added comprehensive test suite for state management
- ✓ Test cases cover:
  - State initialization
  - URL selection and visibility
  - Loading and error handling
  - URL unloading
  - Error retry tracking
  - Multiple URL selections
  - State persistence during URL switches

### 2024-04-03 12:00 - Test Refinement
- ✓ Updated test suite to match actual types
- ✓ Fixed mock data structure
- ✓ Added missing state assertions
- ✓ Improved test coverage for error handling
- ✓ Ensured proper type imports

### 2024-04-03 12:30 - Documentation Complete
- ✓ Added comprehensive documentation
- ✓ Created main feature documentation (README.md)
- ✓ Added detailed component documentation
- ✓ Documented:
  - State structure and types
  - Component interfaces and usage
  - Error handling patterns
  - Performance optimizations
  - Testing strategies
  - Best practices

### 2024-04-03 14:30 - Implementation Review
- ✓ Fixed iframe reloading issue
- ✓ Reviewed current implementation against plan
- ✓ Updated plan with current status
- ✓ Identified remaining tasks
- 📚 Updated documentation with current status
- ⏭️ Next: Complete test coverage and validation tasks

## Current Status
**Updated**: 2024-04-03 14:30

### Completed Phases ✅
- Phase 1: State Consolidation
- Phase 2: Component Updates
- Phase 5: Cleanup

### In Progress Phases 🟡
1. Phase 3: Testing Implementation
   - Need additional test coverage for:
     - Error handling and recovery
     - Longpress unload
     - Initial load behavior
     - State consistency

2. Phase 4: Validation
   - Fixed iframe reloading issue
   - URL parameter handling needs review
   - Pending validations:
     - Iframe mounting behavior
     - Error recovery flows
     - Notification integration
     - State consistency
     - Longpress unload

### Next Actions
1. Complete Test Coverage:
   - [ ] Add error handling tests
   - [ ] Add longpress unload tests
   - [ ] Add initial load tests
   - [ ] Add state consistency tests

2. Validation Tasks:
   - [ ] Verify iframe mounting behavior
   - [ ] Test error recovery flows
   - [ ] Check notification integration
   - [ ] Validate state consistency
   - [ ] Test longpress unload
   - [ ] Test menu loaded icon functionality

3. URL Parameter Handling:
   - [ ] Review current implementation
   - [ ] Test URL parameter persistence
   - [ ] Verify state sync with URL

## Critical Rules Being Followed
- 010-docs-memory-knowledge-management
- 051-vitest-react-testing-lib-testing-standards
- 502-typescript-patterns

## Dependencies
- React 18+
- Next.js App Router
- TypeScript 5+

## Notes
- Keep iframes mounted once loaded
- Only unload via longpress
- Clear errors on re-selection
- Show fallback UI for errors
- Use existing notification system
