---
description: 
globs: 
alwaysApply: true
---
---
description: Update plan files when tasks are started, modified, or completed to maintain accurate project state
globs: docs/working-memory/**/*.md
alwaysApply: true
---

# Plan Updates Rule

# Guidelines for making surgical, focused updates to plan files

<rule>
name: plan_updates
description: Rules for maintaining precision in plan updates


# Plan Update Requirements

## Context
- When starting a new task
- When completing a task
- When making significant progress
- When changing task status
- When modifying task scope

## Requirements
1. Always get current timestamp from terminal command
2. Update both task plan and main plan.md
3. Move task files to appropriate directories (open/done)
4. Include detailed progress history entries
5. Check and update related documentation


## Plan Update Guidelines:

   1. Surgical Focus:
      a) Phase Isolation:
         - Only update the current active phase
         - Leave future phases unchanged
         - Preserve original structure of other phases
         - Mark interrupted tasks as [INCOMPLETE]

      b) Task Status:
         - Use [x] for completed tasks
         - Use [ ] for pending tasks
         - Use [INCOMPLETE] for interrupted tasks
         - Maintain task hierarchy and indentation

      c) Task Additions:
         - Add new tasks only to current phase
         - Place new tasks in logical sequence
         - Maintain consistent formatting
         - Preserve task dependencies

      d) Task Updates:
         - Update only affected tasks
         - Keep unaffected tasks unchanged
         - Maintain original task descriptions
         - Preserve task IDs and references

   2. Change Documentation:
      a) Status Updates:
         - Document changes in updates.md
         - Reference specific tasks modified
         - Explain interruptions
         - Note any blockers

      b) Progress Tracking:
         - Update only completed tasks
         - Maintain task completion order
         - Document partial completions
         - Note dependencies affected

   3. Version Control:
      a) Commit Strategy:
         - Commit only changed phase
         - Use clear commit messages
         - Reference task IDs
         - Note incomplete tasks

      b) Review Process:
         - Verify only intended changes
         - Check phase isolation
         - Validate task status
         - Confirm formatting





## Progress History Format
```markdown
### YYYY-MM-DD HH:mm - Entry Title
- ‚úì Completed: List specific achievements
- ü§î Decisions: Document key decisions
- ‚ùå Issues: Note problems and solutions
- üìö Documentation: List doc updates
- ‚è≠Ô∏è Led to: Note outcomes/impacts
```

## Examples

- input: |
   ### Phase 1: Foundation
   - [x] Task 1.1
   - [ ] Task 1.2
   - [INCOMPLETE] Task 1.3
   
   ### Phase 2: Implementation
   [Original content preserved]

- input: |
   Commit message:
   plan(task-123): update Phase 1 tasks, mark Task 1.3 incomplete


<example>
### 2025-03-19 21:20 - Task Completion
- ‚úì Completed: Implemented feature X
- ü§î Decisions: Used approach Y for better performance
- ‚ùå Issues: Fixed Z compatibility
- üìö Documentation: Updated component docs
- ‚è≠Ô∏è Led to: Improved user experience
</example>

<example type="invalid">
### Today - Done
- Finished the task
- Updated some docs
</example>

## Critical Rules
- NEVER use hardcoded timestamps
- ALWAYS update both task plan and main plan.md
- ALWAYS include progress history entries
- ALWAYS move task files to correct directories
- ALWAYS check related documentation
- Focus on current phase only
- Document interrupted tasks
- Maintain plan structure
- Keep future phases intact
- Update status in sync


metadata:
  priority: high
  version: 1.0
  tags:
    - planning
    - documentation
    - task-management
</rule> 