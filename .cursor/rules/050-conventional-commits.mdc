---
description: Rule for automatically committing changes made by CursorAI using conventional commits format.
globs: "**/*"
alwaysApply: true
---
# Git Conventional Commits

Rule for automatically committing changes made by CursorAI using conventional commits format.

<rule>
name: conventional_commits
description: Automatically commit changes made by CursorAI using conventional commits format with support for breaking changes, multiple scopes, and detailed descriptions

filters:
  - type: event
    pattern: "build_success"
  - type: file_change
    pattern: "*"

actions:
  - type: suggest
    message: |
      Changes should be committed using conventional commits format:

      Format: <type>(<scope>): <description>
             [BREAKING CHANGE: <breaking change description>]
             [<body>]
             [<footer>]

      Types:
      - feat: ‚ú® A new feature
      - fix: üêõ A bug fix
      - hotfix: üî• Hotfix Required
      - docs: üìö Documentation only changes
      - plan: üìö Plan only changes
      - style: üíé Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
      - refactor: üì¶ A code change that neither fixes a bug nor adds a feature
      - perf: üöÄ A code change that improves performance
      - test: üö® Adding missing tests or correcting existing tests
      - build: üõ† Changes that affect the build system or external dependencies
      - ci: ‚öôÔ∏è Changes to CI configuration files and scripts
      - chore: ‚ôªÔ∏è Other changes that don't modify src or test files
      - revert: üóë Reverts a previous commit
      - rule: üìú Changes to .cursor/rules files

      Scope:
      - Can be multiple, comma-separated
      - Derived from file path and content
      - Optional if no specific scope applies

      Breaking Changes:
      - ALWAYS confirm with the user before adding "BREAKING CHANGE:" to commits
      - Ask explicitly: "This change appears to be breaking. Should I include a BREAKING CHANGE notice in the commit message?"
      - If confirmed, add "BREAKING CHANGE:" in the description
      - Include clear explanation of what breaks and how to update
      - Example confirmation:
        ```
        This change modifies the authentication API interface.
        This appears to be a breaking change because:
        - It removes the legacy authentication method
        - It requires updating client configurations

        Would you like me to include a BREAKING CHANGE notice in the commit?
        ```

      Body and Footer:
      - Body: Detailed description of the change
      - Footer: References to issues (e.g., "Closes #123")

      ## Commit Message Patterns

      1. Simple Single-Line (Most Reliable):
      ```powershell
      # PowerShell
      git commit -m "feat(ui): add new button component" -ErrorAction Stop
      ```
      ```bash
      # Bash
      git commit -m "feat(ui): add new button component"
      ```

      2. Two-Part Message (Recommended):
      ```powershell
      # PowerShell - Using array for multiple messages
      $messages = @(
          "feat(ui): add new dashboard components",
          "Implements metric cards and responsive layout"
      )
      git commit -m $messages[0] -m $messages[1] -ErrorAction Stop
      ```
      ```bash
      # Bash
      git commit -m "feat(ui): add new dashboard components" \
                -m "Implements metric cards and responsive layout"
      ```

      3. Multi-line Message (For Complex Changes):
      ```powershell
      # PowerShell - Using array join for reliable multi-line (recommended)
      $commitLines = @(
          "feat(auth): implement OAuth2 authentication",
          "",
          "- Add OAuth2 provider integration",
          "- Update middleware",
          "",
          "BREAKING CHANGE: New authentication flow requires client update"
      )
      $msg = $commitLines -join "`n"
      git commit -m $msg -ErrorAction Stop

      # Alternative: Using here-string (note: be careful with indentation)
      $msg = @"
feat(auth): implement OAuth2 authentication

- Add OAuth2 provider integration
- Update middleware

BREAKING CHANGE: New authentication flow requires client update
"@
      git commit -m $msg -ErrorAction Stop
      ```
      ```bash
      # Bash - Using heredoc
      git commit -m "$(cat << 'EOF'
feat(auth): implement OAuth2 authentication

- Add OAuth2 provider integration
- Update middleware

BREAKING CHANGE: New authentication flow requires client update
EOF
      )"
      ```

      4. Using Editor (For Very Complex Messages):
      ```powershell
      # PowerShell - Set editor with error handling
      try {
          # Save current editor if exists
          $prevEditor = if (Test-Path Env:\GIT_EDITOR) { $env:GIT_EDITOR } else { $null }

          # Set new editor
          $env:GIT_EDITOR = "code --wait"

          # Attempt commit
          git commit -ErrorAction Stop
      }
      catch {
          Write-Error "Failed to commit: $_"
      }
      finally {
          # Restore previous editor state
          if ($null -ne $prevEditor) {
              $env:GIT_EDITOR = $prevEditor
          }
          else {
              Remove-Item Env:\GIT_EDITOR -ErrorAction SilentlyContinue
          }
      }
      ```
      ```bash
      # Bash
      export GIT_EDITOR="code --wait"
      git commit
      ```

      ## Best Practices

      1. Message Structure:
         - Keep messages clear and concise
         - Use imperative mood ("add" not "added")
         - Separate subject from body with blank line
         - Limit subject line to 50 characters
         - Wrap body at 72 characters

      2. Reliable Approaches (in order of preference):
         - Single -m parameter for simple changes
         - Array-based approach for multiple messages
         - Array join for complex multi-line messages
         - Here-string only when necessary (beware of indentation)

      3. Command Sequencing:
         ```powershell
         # PowerShell - Using try/catch with proper error handling
         try {
             # Stage changes
             git add . -ErrorAction Stop

             # Prepare commit message
             $messages = @(
                 "feat(scope): new feature",
                 "Detailed description of changes"
             )

             # Commit with error handling
             git commit -m $messages[0] -m $messages[1] -ErrorAction Stop
         }
         catch {
             Write-Error "Git operation failed: $_"
             Write-Error "Error occurred at line: $($_.InvocationInfo.ScriptLineNumber)"
         }
         ```
         ```bash
         # Bash - Using separate lines
         git add .
         git commit -m "feat(scope): new feature"
         ```

      4. Breaking Changes:
         ```powershell
         # PowerShell - Using array join for reliable formatting
         try {
             $commitMsg = @(
                 "feat(auth): implement new authentication system",
                 "",
                 "- Add OAuth2 provider integration",
                 "- Remove legacy authentication",
                 "- Update middleware",
                 "",
                 "BREAKING CHANGE: Legacy authentication removed.",
                 "Update client configurations to use OAuth2.",
                 "Migration guide: https://docs.example.com/migration"
             ) -join "`n"

             git commit -m $commitMsg -ErrorAction Stop
         }
         catch {
             Write-Error "Failed to commit breaking change: $_"
             Write-Error "Error details: $($_.Exception.Message)"
         }
         ```
         ```bash
         # Bash
         git commit -m "$(cat << 'EOF'
feat(auth): implement new authentication system

- Add OAuth2 provider integration
- Remove legacy authentication
- Update middleware

BREAKING CHANGE: Legacy authentication removed.
Update client configurations to use OAuth2.
Migration guide: https://docs.example.com/migration
EOF
         )"
         ```

      ## Common Pitfalls to Avoid

      1. String Handling:
         ```powershell
         # PowerShell - DON'T use string concatenation
         # BAD: Unreliable line endings
         $msg = "feat(scope): title" + "`n" + "body"

         # BAD: Indented here-string (adds unwanted spaces)
         $msg = @"
             feat(scope): title
             body
         "@

         # GOOD: Array join approach
         $msg = @(
             "feat(scope): title",
             "",
             "body"
         ) -join "`n"

         # GOOD: Clean here-string (when necessary)
         $msg = @"
feat(scope): title

body
"@
         ```

      2. Error Handling:
         ```powershell
         # PowerShell - DON'T skip error handling
         # BAD: No error handling
         git commit -m "message"  # Bad

         # GOOD: Proper error handling
         try {
             git commit -m "message" -ErrorAction Stop
         }
         catch {
             Write-Error "Commit failed: $_"
         }
         ```

examples:
  - input: |
      # After adding a new feature
      CHANGE_DESCRIPTION="add user authentication function"
      FILE="src/auth/login.ts"
    output: "feat(src-auth): add user authentication function"

  - input: |
      # After fixing a bug with breaking change
      CHANGE_DESCRIPTION="fix incorrect date parsing"
      FILE="lib/utils/date.js"
      # BREAKING CHANGE: Date format changed from ISO to Unix timestamp
    output: "fix(lib-utils,breaking): fix incorrect date parsing\n\nBREAKING CHANGE: Date format changed from ISO to Unix timestamp"

  - input: |
      # After adding feature with issue reference
      CHANGE_DESCRIPTION="add dark mode support"
      FILE="src/theme/dark-mode.ts"
      # Closes #123
    output: "feat(src-theme): add dark mode support\n\nCloses #123"

metadata:
  priority: high
  version: 1.4.0
</rule>
