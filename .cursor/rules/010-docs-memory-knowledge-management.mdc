---
description: Memory Management System - Comprehensive rules for managing working memory, project memory, and documentation memory
globs:
alwaysApply: true
---

# Memory Management System

<rule>

## CRITICAL REMINDER

REMEMBER: My memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on the /docs files to understand the project and continue work effectively. I MUST read /docs/working-memory/plan.md at the start of EVERY task - this is not optional.

## Essential Rules

1. Memory Reset Protocol:
   - Complete memory reset between sessions
   - All context must come from /docs
   - Mandatory plan.md review before tasks
   - Mandatory plan.md update during and after tasks
   - No assumptions about previous state

2. Directory Structure:
   ```
   /docs/
   ├── working-memory/           # Active context
   │   ├── open/                # Active tasks
   │   │   └── {task-id}/      # Task-specific directory
   │   │       ├── .plan       # Task planning and updates
   │   ├── done/               # Completed tasks
   │   └── plan.md             # Main project plan
   ├── templates/              # Project templates
   │   └── feature/           # Feature documentation templates
   │       ├── README.md      # Feature overview template
   │       ├── api.md         # API documentation template
   │       ├── architecture.md # Design documentation template
   │       ├── components.md   # Component documentation template
   │       └── testing.md     # Test documentation template
   ├── features/              # Project features
   ├── project-context.md     # Project context and structure
   └── cursor_settings.md     # IDE settings
   ```

3. Memory Types and Lifecycle:
   a) Working Memory:
      - Location: /docs/working-memory/
      - Purpose: Active task tracking
      - Updates: Real-time
      - Lifecycle: Task duration
      - Integration Requirements:
        - Link to feature docs
        - Track documentation updates
        - Monitor component changes

   b) Project Memory:
      - Location: /docs/
      - Purpose: Long-term knowledge
      - Updates: After milestones
      - Lifecycle: Project duration
      - Integration Requirements:
        - Maintain feature directory
        - Track documentation versions
        - Monitor architecture decisions

   c) Documentation Memory:
      - Location: /docs/templates/
      - Purpose: Standards and patterns
      - Updates: Monthly reviews
      - Lifecycle: Project evolution
      - Integration Requirements:
        - Update templates
        - Track usage patterns
        - Document best practices

## Development Requirements

1. Documentation First:
   - Update documentation before code changes and update plans with current progress
   - Maintain real-time progress tracking
   - Ensure cross-reference accuracy

2. Task Management:
   - Create task directories using templates
   - Track progress in the task .plan document at the bottom in the Progress History section
   - Move completed tasks to done/ and updating linking in the main plan.md file

3. Quality Standards:
   - Validate documentation links
   - Verify template compliance
   - Maintain timestamp accuracy

## Problem-Solving Approach

1. Documentation Issue Analysis:
   - Identify affected documentation
   - List impacted components
   - Check cross-references
   - Verify template compliance

2. Solution Design:
   - Plan documentation updates
   - Consider cross-reference impacts
   - Evaluate template changes
   - Plan validation steps

3. Implementation Steps:
   - Update affected documents
   - Validate cross-references
   - Verify template compliance
   - Update timestamps

## Git Integration

1. Commit Patterns:
   ```powershell
   # PowerShell - Memory-related commits
   git commit -m "docs(memory): update task-123 working memory"

   # PowerShell - Plan updates
   git commit -m "docs(plan): update project milestones for Q2"

   # PowerShell - Documentation changes
   git commit -m "docs(tech): update API authentication docs"
   ```

   ```bash
   # Bash - Memory-related commits
   git commit -m "docs(memory): update task-123 working memory"

   # Bash - Plan updates
   git commit -m "docs(plan): update project milestones for Q2"

   # Bash - Documentation changes
   git commit -m "docs(tech): update API authentication docs"
   ```

## Template Usage

1. Task Creation:
   ```powershell
   # PowerShell - Create task directory
   New-Item -Path "docs/working-memory/open/${feature-name}-$(Get-Date -Format 'yyyyMMdd')" -ItemType Directory -Force

   # PowerShell - Copy templates
   Copy-Item -Path "docs/templates/task-plan-template.md" -Destination "docs/working-memory/open/${feature-name}-$(Get-Date -Format 'yyyyMMdd')/.plan"
   ```

   ```bash
   # Bash - Create task directory
   mkdir -p "docs/working-memory/open/${feature-name}-$(date +%Y%m%d)"

   # Bash - Copy templates
   cp "docs/templates/task-plan-template.md" "docs/working-memory/open/${feature-name}-$(date +%Y%m%d)/.plan"
   ```

2. Status Updates:
   ```markdown
   ## Current Status
   ### PowerShell: $(Get-Date -Format "yyyy-MM-dd HH:mm")
   ### Bash: $(date "+%Y-%m-%d %H:%M")

   **Status**: In Progress

   - What's working: {current state}
   - What's not: {current issues}
   - Blocking issues: {if any}
   - Next actions: {immediate next steps}
   ```

3. Progress Tracking:
   ```markdown
   ## Progress History
   ### PowerShell: $(Get-Date -Format "yyyy-MM-dd HH:mm") - {Brief Title}
   ### Bash: $(date "+%Y-%m-%d %H:%M") - {Brief Title}

   - ✓ Completed: {work completed}
   - 🤔 Decisions: {decisions made}
   - ❌ Issues: {problems encountered}
   - 📚 Documentation: {documentation updates}
   - ⏭️ Next: {next steps}
   ```

## Validation Requirements

1. Documentation Checks:
   - All links must be valid
   - Templates must be followed
   - Timestamps must be current
   - Cross-references must be accurate

2. Task Completion Criteria:
   - Documentation is updated
   - Templates are followed
   - Cross-references are valid
   - Timestamps are current

3. Quality Metrics:
   - No broken links
   - No missing sections
   - No outdated timestamps
   - No invalid cross-references

## Critical Reminders

1. Always:
   - Update plan.md before starting work
   - Use current timestamps
   - Follow templates exactly
   - Validate cross-references

2. Never:
   - Skip documentation updates
   - Use manual timestamps
   - Ignore templates
   - Leave broken links

3. Before Task Completion:
   - Verify all documentation
   - Check all cross-references
   - Validate all templates
   - Update all timestamps

## Metadata

priority: critical
version: 1.1.0
last_updated:
  powershell: $(Get-Date -Format "yyyy-MM-dd HH:mm")
  bash: $(date "+%Y-%m-%d %H:%M")
tags:
  - memory
  - documentation
  - task-management
  - working-memory
  - templates
  - validation
dependencies:
  - .cursorrules
  - /docs/templates/
  - /docs/working-memory/
</rule>