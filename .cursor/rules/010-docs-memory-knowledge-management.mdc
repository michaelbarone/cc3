---
description: Memory Management System - Comprehensive rules for managing working memory, project memory, and documentation memory
globs:
alwaysApply: true
---

# Memory Management System

<rule>
Memory Management System Rules:

REMEMBER my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on the /docs files to understand the project and continue work effectively. I MUST read /docs/working-memory/plan.md at the start of EVERY task - this is not optional.

1. Memory Types:
    a) Working Memory:
      - Location: /docs/working-memory/
      - Purpose: Active context and ongoing tasks
      - Updates: Real-time during task execution
      - Structure:
        ```
        /docs/working-memory/
        ‚îú‚îÄ‚îÄ open/                 # Active tasks
        ‚îÇ   ‚îî‚îÄ‚îÄ {task-id}/
        ‚îÇ       ‚îî‚îÄ‚îÄ .plan        # Task planning
        ‚îú‚îÄ‚îÄ done/                # Completed tasks
        ‚îî‚îÄ‚îÄ plan.md              # All Plan and Task Tracking
        ```

    b) Project Memory:
      - Location: /docs/
      - Purpose: Long-term project knowledge
      - Updates: Major decisions and milestones
      - Components: Architecture, decisions, standards

    c) Documentation Memory:
      - Location: /docs/templates/
      - Purpose: Standards and patterns
      - Review: Monthly template updates
      - Maintenance: Keep examples current

2. Task Documentation Files:
    a) plan.md Requirements:
      - Problem Analysis
      - Solution Design
      - Implementation Steps
      - Affected Components
      - Testing Plan
      - Documentation Impact
      - Dependencies
      - Phase Management:
        - Only update current active phase
        - Preserve future phases
        - Mark interrupted tasks as [INCOMPLETE]
        - Maintain phase dependencies

    b) updates.md Structure:
      - Current Status (top, single entry)
      - Progress History (chronological)
      - Decisions Log
      - Issues Encountered
      - Next Steps
      - Surgical Updates:
        - Update only affected tasks
        - Preserve task hierarchy
        - Maintain task IDs
        - Document interruptions

3. Status Update Process:
    a) Current Status:
      - Single active status
      - Use `date "+%Y-%m-%d %H:%M"` for timestamps
      - Previous status moves to history
      - Task Status Markers:
        - [x] for completed tasks
        - [ ] for pending tasks
        - [INCOMPLETE] for interrupted tasks
        - Maintain task hierarchy

    b) Progress Markers:
      - ‚úì Completed work
      - ü§î Decisions made
      - ‚ùå Issues encountered
      - ‚è≠Ô∏è Next steps
      - üìö Documentation updates

4. Feature Documentation Management:
    a) Structure:
      ```
      /docs/features/{feature-name}/
      ‚îú‚îÄ‚îÄ README.md           # Feature overview
      ‚îú‚îÄ‚îÄ architecture.md     # Technical design
      ‚îú‚îÄ‚îÄ components.md       # Component documentation
      ‚îú‚îÄ‚îÄ api.md             # API endpoints
      ‚îî‚îÄ‚îÄ testing.md         # Test scenarios
      ```

    b) Integration with Working Memory:
      - Link feature docs in task plans
      - Track documentation debt
      - Include doc updates in progress history
      - Reference affected documentation

    c) Documentation Requirements:
      - Every feature task plan MUST include documentation updates
      - Documentation changes MUST be reviewed before task completion
      - Feature cannot be marked as complete without documentation
      - All component changes require component.md updates

    d) Review Process:
      - Documentation completeness check
      - Cross-reference validation
      - Template compliance
      - Regular health monitoring
      - Monthly reviews

    e) Feature Documentation Lifecycle:
      - Creation:
        - Create feature directory on feature branch
        - Start with README.md
        - Add other docs as feature develops
      - Maintenance:
        - Update on significant changes
        - Review monthly
        - Archive deprecated features
      - Cross-Referencing:
        - Link to related features
        - Reference components
        - Document API dependencies

5. Cross-Reference Management:
    a) Task References:
      - Link to related feature docs
      - Track dependencies
      - Maintain relationship graphs
      - Regular validation checks

    b) Documentation Links:
      - Use relative paths
      - Include section anchors
      - Regular link validation
      - Update on file moves

    c) Component References:
      - Link to implementation files
      - Track component relationships
      - Document API dependencies
      - Monitor cross-component impacts

6. Documentation Review Process:
    a) Review Requirements:
      - Documentation completeness check
      - Cross-reference validation
      - Template compliance
      - Feature documentation updates
      - Component documentation updates

    b) Health Monitoring:
      - Template usage analysis
      - Best practices updates
      - Documentation debt tracking

7. Version Control:
    a) Commit Patterns:
      - Prefix: docs(memory)
      - Include task ID
      - Reference memory types

Remember:
- Update status before starting work
- ALWAYS run a command to get the current time for timestamp updates in files
- Document decisions immediately
- Keep progress log current
- Use proper timestamps
- Regular maintenance and cleanup
- ALWAYS update both task plan and main plan.md
- ALWAYS include progress history entries
- ALWAYS move task files to correct directories
- ALWAYS check related documentation
- Focus on current phase only
- Document interrupted tasks
- Maintain plan structure
- Keep future phases intact
- Update status in sync

REMEMBER: After every memory reset, I begin completely fresh. The /docs directory is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy. ALWAYS update .plan and plan.md documents.

examples:
  - input: |
      # New task creation
      mkdir -p docs/working-memory/open/auth-update-20240320
      cp docs/templates/task-plan-template.md docs/working-memory/open/auth-update-20240320/plan.md
      cp docs/templates/task-updates-template.md docs/working-memory/open/auth-update-20240320/updates.md

  - input: |
      # Status update
      date "+%Y-%m-%d %H:%M"
      # Update status in updates.md

  - input: |
      # Task completion
      mv docs/working-memory/open/auth-update-20240320 docs/working-memory/done/

metadata:
  priority: critical
  version: 1.0
  tags:
    - memory
    - documentation
    - task-management
</rule>