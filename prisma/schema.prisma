generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  passwordHash  String?
  isAdmin       Boolean        @default(false)
  lastActiveUrl String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?
  avatarUrl     String?
  menuPosition  String?        @default("top")
  themeMode     String?        @default("dark")
  userUrlGroups UserUrlGroup[]
  settings      UserSetting[]
}

model UrlGroup {
  id            String         @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  urls          UrlsInGroups[]
  userUrlGroups UserUrlGroup[]
}

model Url {
  id                 String        @id @default(uuid())
  title              String
  url                String
  urlMobile          String?
  iconPath           String?
  idleTimeoutMinutes Int           @default(10)
  isLocalhost        Boolean       @default(false)
  port               String?
  path               String?
  localhostMobilePath String?
  localhostMobilePort String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  urlGroups          UrlsInGroups[]
}

model UrlsInGroups {
  url         Url      @relation(fields: [urlId], references: [id], onDelete: Cascade)
  urlId       String
  group       UrlGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  displayOrder Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([urlId, groupId])
  @@index([groupId, displayOrder])
  @@map("urls_in_groups")
}

model UserUrlGroup {
  userId     String
  urlGroupId String
  createdAt  DateTime @default(now())
  urlGroup   UrlGroup @relation(fields: [urlGroupId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, urlGroupId])
}

model AppConfig {
  id                 String   @id @default("app-config")
  appName            String   @default("Control Center")
  appLogo            String?
  favicon            String?
  loginTheme         String   @default("dark")
  registrationEnabled Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model UserSetting {
  userId    String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, key])
}
