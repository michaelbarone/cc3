# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Please reference the Scratchpad Guidelines section below.

if you are asked to "create a checkpoint" or "commit changes", please commit changed files and add a message
for commit messages, please follow any commitlint config file in the repository and fallback to conventional commit format standards

## Guidance
  You are an expert in TypeScript, Node.js, Next.js, Next.js App Router, React, Material UI.

  You are pair programming with a subject matter expert, please ask clarifying questions and confirm which choice when there are valid options.

  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.

  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.

  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.

  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.

  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.

  Follow Next.js docs for Data Fetching, Rendering, and Routing.

## Lessons

### User Specified Lessons

### Cursor learned

1. Next.js cookies() API must be awaited - When using the cookies() API in Next.js route handlers, the cookies() function must be awaited before accessing its methods. Example: `const cookieStore = cookies(); await cookieStore.get()` should be updated to access cookies asynchronously. This is particularly important for server components and API routes.


## Scratchpad Guidelines

The goal is to help you maintain a big picture as well as the progress of the task at hand. Always refer to the Scratchpad when you plan the next step.
Add new planned items to the scratchpad when they are out of scope of our current task and we want to revisit them later.
after completing all work, always remember to review the scratchpad and update any completed items in addition to addting any items for future consideration

1. Task Organization:
   - Update the Current Task section when starting a new task
   - Add a clear task description at the top
   - Break down complex tasks into subtasks
   - Use consistent formatting for task tracking

2. Progress Tracking:
   - Use [X] for completed tasks
   - Use [ ] for pending tasks
   - Use [-] for in-progress tasks
   - Use [!] for blocked tasks with reasons

3. Task Documentation:
   - Add relevant context and requirements
   - Note any dependencies or prerequisites
   - Document important decisions and their rationale
   - Track any blockers or issues encountered

4. Future Planning:
   - Add items for future consideration with [>]
   - Note potential improvements or optimizations
   - Track technical debt items
   - Document ideas for future enhancements

5. Previous work in scratchpad:
   - as we completed items in the scratchpad, we can move them to a new "Complete Work" section below the scratchpad to archive completed work records and keep the current scratchpad section focused.
   - when we have completed the entirety of the current task, we can summarize the current task and move it to the "Complete Work" section, do not move anything new to the current task section until instructed.  We can leave a placeholder for Current Task as "no current task" to keep us focused and aware.

6.  Also update the progress of the task in the Scratchpad when you finish a subtask as outlined in 2. Progress Tracking above:
   - When a group of subtasks are done, please commit the changes with a short but descriptive message following the commitlint.config.cjs file rules
   - Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan

Example Scratchpad Structure with current task:
```markdown
## Current Task: [Task Name]

### Context
- Brief description of the task
- Key requirements and constraints
- Any relevant background information

### Plan
Step 1:
[ ] task 1: Initial setup and requirements gathering
[ ] task 2: Implementation planning
[ ] task 3: Core implementation
[ ] task 4: Testing and validation
[ ] task 5: Documentation and cleanup

Step 2:
[ ] task 1: first task for step 2
[ ] task 2: 2nd task for step 2

### Progress
[X] Completed setup phase
[-] Working on core implementation
[ ] Pending testing

### Blockers
[!] Blocked by dependency issue (waiting for API update)

### Future Considerations
[>] Consider adding performance monitoring
[>] Potential optimization for large datasets
```

Example Scratchpad Structure with no task:
```markdown
## Current Task: no current task
```

## Scratchpad

## Current Task: IframeContainer Refactor

### Context
- Need to refactor IframeContainer for better state management and component organization
- Must maintain global iframe container outside React for proper functionality
- Need to integrate with menu items for state synchronization
- Support both mobile and desktop URLs
- Support cross-origin iframes with fallbacks
- Maintain reset/reload functionality
- Support URL-specific idle timeouts

### Plan
Step 1: Core Types and Infrastructure
[X] task 1: Create base types in types/iframe.ts
    - IframeStatus enum ('active-loaded' | 'active-unloaded' | 'inactive-loaded' | 'inactive-unloaded')
    - IframeState interface (id, url, urlMobile, status, error, lastActivity, idleTimeout)
    - IframeAction type for reducer actions
    - IframeContextValue interface for context
[X] task 2: Create action creators in state/actions.ts
    - setIframeStatus action
    - setIframeError action
    - updateIframeActivity action
    - resetIframe action
[X] task 3: Create state reducer in state/reducer.ts
    - Handle all action types
    - Implement state transitions
    - Add activity tracking
[X] task 4: Create context structure
    - IframeContext.tsx with provider
    - Initial state setup
    - Context consumer hook

Step 2: Core Hooks Implementation
[X] task 1: Create useGlobalIframeContainer hook
    - Implement container creation/management
    - Add position syncing with ResizeObserver
    - Handle cleanup
[X] task 2: Create useIframeLifecycle hook
    - Handle iframe creation/destruction
    - Manage load/error events
    - Track activity state
[X] task 3: Create useIframeVisibility hook
    - Handle show/hide logic
    - Manage z-index
    - Handle transitions
[X] task 4: Create useIdleTimeout hook
    - Implement per-URL timeout tracking
    - Add activity reset
    - Handle cleanup
[X] task 5: Create useIframeEvents hook
    - Handle load events
    - Handle error events
    - Manage cross-origin fallbacks

Step 3: Component Implementation
[X] task 1: Create overlay components
    - LoadingOverlay with progress indicator
    - ErrorOverlay with retry button
    - UnloadedOverlay with reload button
[X] task 2: Create IframeWrapper component
    - Handle iframe rendering
    - Manage ref forwarding
    - Handle mobile/desktop URLs
[X] task 3: Refactor main IframeContainer
    - Use new hooks and components
    - Implement proper state management
    - Add error boundaries

Step 4: Menu Integration
[X] task 0: check the current implementation of the menu, and assess further steps
[X] task 1: Identify shared state interface
    - Confirmed using existing IframeState interface
    - Already includes all required states (active-loaded, active-unloaded, inactive-loaded, inactive-unloaded)
    - Contains error handling and activity tracking
[X] task 2: Ensure existing Menu components work with the new state system
    - Created MenuBarAdapter component to bridge between systems
    - Transforms IframeContext state to MenuBar props
    - Handles URL click, reload, and unload events
[ ] task 2.1: fix top menu format, it is not the same as the left menu structure.
[ ] task 2.2: the iframes are no longer showing
[ ] task 3: Improve state transitions
    - Add smooth animations between states
    - Enhance loading feedback
    - Implement error recovery UI

Step 5: Testing and Validation
[ ] task 1: Create test suite
    - Add state transition tests
    - Test menu integration
    - Validate mobile support
[ ] task 2: Test error scenarios
    - Test cross-origin handling
    - Validate timeout behavior
    - Check cleanup

### Progress
[X] Initial analysis complete
[X] Core types and infrastructure implementation complete
[X] Hooks implementation complete
[X] Component implementation complete
[-] Menu integration in progress
[ ] Testing pending

### Blockers
[!] Need to verify cross-origin iframe behavior in production environment

### Dependencies
- Material UI for components
- React context for state management
- ResizeObserver for container management
- URL-specific idle timeouts from database

## Future Plans

URL Menu State Management

### Context
- Need to implement four specific states for URL menu items:
  1. 'active-loaded': Active button + green dot (visible iframe with content)
  2. 'active-unloaded': Active button, no dot (visible iframe, no content)
  3. 'inactive-loaded': Normal button + green dot (hidden iframe with cached content)
  4. 'inactive-unloaded': Normal button, no dot (hidden iframe, no content)
- All buttons start as 'inactive-unloaded' on app load
- Selected URL button becomes 'active-loaded' when clicked

### Plan
Step 1: State Implementation
[X] Define UrlMenuItemState type with four states
[X] Update button component to handle all states correctly
[X] Implement proper state transitions on click events

Step 2: Iframe Management
[X] Ensure proper iframe src management (empty vs data-src)
[X] Implement content caching for inactive-loaded state
[X] Verify proper state sync between button and iframe
[X] Create unified long press handler using custom hook
[X] Move long press state management to IframeStateContext
[X] Add visual feedback during long press (progress indicator)
[ ] Test visual feedback implementation:
    - Verify progress bar appears during long press
    - Check progress bar styling and transparency
    - Test progress updates are smooth (no stuttering)
    - Verify proper cleanup after long press
[ ] Improve tooltips for long press actions
[ ] Add haptic feedback for mobile devices
[ ] Implement proper cleanup of event listeners
[ ] Test edge cases (rapid clicks, interrupted long press)
[ ] Verify menu button click, long press are managed properly and result in the correct state being set

### Progress
[X] Defined clear requirements for each state
[X] Clarified visual indicators for each state
[X] Implemented proper iframe initialization in inactive-unloaded state
[X] Added automatic content loading for active URLs
[X] Synchronized button states with iframe loading states
[X] Fixed timing issues with iframe content loading
[X] Implemented proper state management for URL activation
[X] Created and implemented useLongPress hook with proper TypeScript types and event handling
[X] Integrated long press state management with IframeStateContext
[X] Added visual progress indicator for long press actions



### Idle Timeout Implementation

#### Context
- Need to implement URL-specific idle timeout cleanup
- Affects both iframe content and button state

#### Plan
Step 1: Timer Management
[ ] Implement idle timeout tracking per URL
[ ] Create cleanup mechanism for expired timeouts
[ ] Add timer reset on URL activation

Step 2: State Updates
[ ] Clear iframe content (src="") on timeout
[ ] Update button state to unloaded
[ ] Implement proper state management updates

Step 3: Testing
[ ] Test timeout triggers
[ ] Verify proper cleanup
[ ] Test timer reset behavior

## Future Tasks

### Performance Optimization
[ ] Optimize iframe loading and switching
[ ] Implement lazy loading for inactive iframes
[ ] Configure caching policies
[ ] Optimize SQLite queries

### Security & Monitoring
[ ] Implement container security measures
[ ] Add security scanning
[ ] Configure file permissions
[ ] Set up network security
[ ] Add container monitoring
[ ] Configure logging
[ ] Set up metrics collection
[ ] Implement alerting

### Testing & Deployment
[ ] Create automated tests
[ ] Set up CI/CD pipeline
[ ] Document deployment
[ ] Implement backup strategy

### User Features
[ ] Add password recovery option
[ ] Add user activity monitoring
[ ] Create user preferences sync
[ ] set dark mode as user default
[ ] move theme toggle into user menu


## Completed Work

### Database Export/Import System
[X] Implemented database and uploads backup/restore functionality
  - Created archive utility functions for zip file handling
  - Added backup/restore functionality with proper error handling
  - Integrated into admin application configuration area
  - Implemented single zip file containing database and uploads
  - Added admin-only access with progress indicators
  - Fixed Windows-specific permission issues
  - Added proper cleanup of temporary files
  - Improved error handling and logging
  - Implemented recursive directory copying for reliable restores
  - Added support for public files (icons, avatars, logos, favicons)

### Project Setup & Architecture
[X] Set up Next.js 14+ project with App Router
  - Next.js 15.2.2 project initialized with TypeScript and ESLint
  - Using App Router structure
[X] Install and configure Material UI
  - Installed Material UI packages and dependencies
  - Set up theme provider with light/dark mode support
[X] Configure TypeScript for type safety
  - TypeScript is configured with the project setup
[X] Set up SQLite with Prisma ORM
  - Prisma installed and configured with SQLite
  - Created database schema with User, UrlGroup, Url, and UserUrlGroup models
[X] Create Docker configuration for development and production
  - Created Dockerfile with multi-stage build
  - Set up docker-compose.yml for easier deployment
  - Added entrypoint script for database migration and server startup
[X] Implement folder structure following Next.js best practices
  - Organized components by feature domain
  - Created necessary directories for app structure

### Database Design
[X] User table (id, username, password_hash (nullable), is_admin, last_active_url, created_at, updated_at)
[X] URL Groups table (id, name, description, created_at, updated_at)
[X] URLs table (id, url_group_id, title, url, icon_path, display_order, created_at, updated_at)
[X] User-URL Group mapping table (user_id, url_group_id, created_at)

### Authentication System
[X] Create simplified login page with username selection (no password if not set)
  - Built responsive login page with Material UI components
  - Implemented conditional password field that only appears when needed
[X] Implement conditional password field that appears only when user has password set
  - Created dynamic password field that shows based on user requirements
  - Added password visibility toggle for better UX
[X] Set up session management with JWT stored in HTTP-only cookies
  - Implemented JWT token generation and verification
  - Created secure HTTP-only cookie storage for tokens
  - Added user session persistence
[X] Create protected routes with middleware for authenticated users and admin-only areas
  - Set up Next.js middleware for route protection
  - Added special handling for admin-only routes
  - Created redirect mechanism for unauthenticated users

### Core UI Components
[X] Design responsive layout with collapsible menu bar for mobile
  - Created app layout with collapsible side navigation for mobile
  - Implemented theme toggle and logout buttons in app bar
[X] Create primary layout component with menu bar and iframe container area
  - Developed AppLayout component with flexible content area
  - Added responsive drawer that collapses on mobile
[X] Implement iframe component with state management and visibility controls
  - Built IframeContainer with loading and error states
  - Implemented hidden iframe caching for multiple URLs
  - Added iframe reset capability for troubleshooting
[X] Build responsive menu bar with active state indicators (underline for active iframe)
  - Created MenuBar component with collapsible URL group sections
  - Added active state indicators for selected URLs
  - Implemented long press functionality for iframe reset

### Menu & URL System
[X] Create API endpoints for fetching user's assigned URL groups
  - Built endpoint to get all URL groups for a user
  - Implemented appropriate error handling and authorization
[X] Implement API endpoints for URL group management in admin area
  - Created CRUD operations for URL groups (create, read, update, delete)
  - Added endpoints for URL management within groups
  - Implemented display order functionality
[X] Create API endpoints for assigning URL groups to users
  - Built endpoints for assigning/removing URL groups for users
  - Added validation and error handling
[X] Improve existing user URL groups endpoint with proper typing
  - Fixed TypeScript issues in existing endpoint
  - Enhanced error handling
[X] Add click-and-hold functionality to reset iframe src (client-side)
  - Implemented long press detection for mouse and touch events
  - Added explicit reset button for better usability
  - Exposed reset functionality through ref to allow parent component control
[X] Add visual indicators for loaded iframes that are not the active menu item
  - Added badge indicators to show loaded but inactive iframes
  - Exposed loaded URLs state through ref to synchronize UI
  - Implemented polling mechanism to keep UI in sync with iframe state
[X] Implement responsive menu collapse for mobile devices (client-side)
  - Added automatic menu group collapse based on active URL
  - Implemented dynamic group open/close based on screen size
  - Enhanced mobile touch interaction and usability
[X] allow the menu bar to be optionally in the header based on user preferences saved in the user settings

### Iframe Management
[X] Build iframe container system with state persistence
  - Created system to track and manage iframe states
  - Implemented proper unloading/reloading of iframes
  - Added controls for explicitly managing loaded/unloaded states
[X] Implement auto-sizing to eliminate scrollbars
  - Added auto-resize functionality for same-origin iframes
  - Included fallback for cross-origin iframes
  - Added error handling for resize attempts
[X] Create state management for multiple loaded iframes with only one visible
  - Implemented efficient visibility controls for multiple iframes
  - Added state tracking for loaded/unloaded/error states
  - Created system for proper cleanup of unused iframes to save resources
[X] Add loading indicators and error handling for iframe content
  - Added loading spinners for in-progress iframe loads
  - Implemented error alerts with retry options
  - Created user-friendly messages for unloaded content
[X] Fix API errors for JWT token cookies
  - Updated JWT functions to properly use async/await with cookies() API
  - Fixed API route handlers to await verifyToken function
[X] remove the scrollbar on the right side of the window

### Admin Configuration
[X] Build admin dashboard UI with protected route
  - Created admin layout with sidebar navigation
  - Implemented admin dashboard with stats overview
[X] Implement user management (create, edit, delete users)
  - Built user management page with CRUD operations
  - Added password optional toggle for user accounts
  - Implemented admin role toggle
[X] Create password optional toggle for user accounts
  - Added switch in user form to enable/disable password requirement
  - Implemented backend support for users with or without passwords
[X] Develop URL group creation and management
  - Created URL group management interface with accordion view
  - Implemented CRUD operations for URL groups
  - Added URL management within groups with ordering capabilities
[X] Build interface for assigning URL groups to users
  - Added UI for user assignment to URL groups with checkboxes
  - Implemented API endpoints for managing user-group assignments
[X] add users to url groups
[X] allow uploading an icon for the urls in the url groups
[X] create an application config area
[X] in the admin area for app configuration, add a way to upload a browser favicon
[X] Create independent URL management system
    - Create new database schema for URLs and URL-Group mappings
    - Write migration script for existing data
    - Create URL management page in admin area
    - Update URL Groups page to use new relationship model
    - Add searchable URL selector with checkboxes for groups
    - Implement URL ordering within groups
    - Add mobile URL support with isMobile detection
    - Move idle timeout setting to URL level

### User Settings
[X] create a drop down menu under the username in the header.  it should have links to the admin area (if the user has admin permission) and to the user settings page
  - Added dropdown menu with user avatar and username
  - Included links to settings and admin area (if user is admin)
  - Added logout option to the dropdown menu
[X] Create user settings page for password management
  - Created settings layout with sidebar navigation
  - Implemented password management page with toggle for password protection
  - Added form validation and API endpoint for password updates
[X] Store and restore last active URL for user convenience
  - Updated dashboard page to use the real API endpoint for fetching URL groups
  - Implemented logic to restore the last active URL when loading the page
  - Added fallback to select the first URL if no last active URL is available
[X] Design architecture to support future setting expansions
  - Created a flexible settings type system with support for various setting types
  - Implemented a settings service with CRUD operations for user settings
  - Designed the architecture to be easily extendable for future setting types
[X] add another item on the user dropdown menu to go back to the iframe content view (dashboard)
  - Added Dashboard menu item to the user dropdown
  - Fixed issues with admin area access by adding debugging
[X] allow uploading an image to be the user avatar
  - Added avatarUrl field to the User model in the database
  - Created AvatarUpload component for uploading and displaying avatars
  - Implemented API endpoints for uploading and deleting avatars
  - Added profile settings page with avatar management
[X] add a setting for left side menu bar or top menu bar

### Login Page
[X] create user tiles instead of needing to type in user names.  for users with passwords, after clicking on their tile, the password field and submit button slides into the tile.
  - Created new API endpoint to fetch all users for login page
  - Implemented user tile grid UI with proper spacing and styling
  - Added animations for tile selection and password field appearance
  - Implemented back button to return to user selection
[X] Create visually appealing login page with application branding
  - Added app logo and name at the top of login page
  - Improved overall design with elevation, spacing, and typography
  - Enhanced visual feedback with animations and transitions
[X] Add smooth transitions and animations for login process
  - Added slide and fade animations for UI transitions
  - Implemented focus management for better user experience
  - Created responsive design for different screen sizes
[X] Implement "remember me" functionality for user convenience
  - Added remember me checkbox that persists user selection
  - Implemented secure localStorage storage for remembered user
  - Added logic to auto-select remembered user on page load
[X] Create clear error messages for authentication failures
  - Enhanced error display with snackbar notifications
  - Improved error message clarity for different failure scenarios
  - Added visual indicators for form validation
[X] login page should be controled by themes, and set in the admin panel in the application configuration page

### State Management
[X] Implement client-side state management for active iframe tracking
[X] Create server-side persistence for user preferences
[X] Build efficient state update system for iframe management
[X] Implement URL state synchronization with browser history

### App initialization
[X] for first run, when there is no database, initialize the database and create and admin user with no password
  - Created database initialization utility in lib/db/init.ts
  - Implemented safe concurrent initialization with flags
  - Added automatic migration running on first access
  - Created initial seed with admin user and default URL group
  - Added default app configuration during initialization
  - Created async database provider to ensure initialization
  - Updated root layout to use async database access

### Containerization
[X] Configure Docker for Next.js application
  - Added health checks for the Next.js application container
  - Implemented proper Node.js production optimizations in Dockerfile
  - Added multi-stage build optimizations for smaller production image
  - Configured proper file permissions and non-root user security

[X] Set up SQLite persistence with Docker volumes
  - Set up named volume for SQLite database file
  - Configured backup volume for database snapshots
  - Implemented proper file permissions for SQLite data directory
  - Added volume health checks and validation

[X] Create Docker Compose setup for easy deployment
  - Added development configuration with proper settings
  - Configured production-specific optimizations (CPU/Memory limits)
  - Set up proper networking with bridge network
  - Added logging configuration with rotation
  - Configured restart policies for reliability

[X] Implement proper environment variable management for configuration
  - Created .env.example with all required variables
  - Documented all environment variables and their purposes
  - Implemented environment variable validation in health checks
  - Set up secrets management through environment variables
  - Configured different env settings for production

[X] Create build and deploy scripts
  - Created enhanced entrypoint script with health checks
  - Added database backup functionality with rotation
  - Implemented container startup validation
  - Added database migration automation
  - Created container cleanup for backups

[X] Add comprehensive documentation
  - Added container architecture documentation
  - Created deployment guide with setup instructions
  - Added troubleshooting section with common issues
  - Documented backup/restore procedures
  - Added development setup instructions
