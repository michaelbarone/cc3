# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
When a group of subtasks are done, please commit the changes with a short but descriptive message following the commitlint.config.cjs file rules
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

## Guidance
  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.

  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.

  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.

  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.

  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.

  Follow Next.js docs for Data Fetching, Rendering, and Routing.

## Lessons


### User Specified Lessons


### Cursor learned

1. Next.js cookies() API must be awaited - When using the cookies() API in Next.js route handlers, the cookies() function must be awaited before accessing its methods. Example: `const cookieStore = cookies(); await cookieStore.get()` should be updated to access cookies asynchronously. This is particularly important for server components and API routes.

## Scratchpad

Full-Stack App Plan: Next.js, SQLite, and Docker
Project Overview
Building a full-stack app with Next.js (frontend), SQLite (database), and Docker (containerization).
The app will feature a user settings area, global admin configuration, and URL/iframe management.
Implementation Plan

1. Project Setup & Architecture
[X] Set up Next.js 14+ project with App Router
  - Next.js 15.2.2 project initialized with TypeScript and ESLint
  - Using App Router structure
[X] Install and configure Material UI
  - Installed Material UI packages and dependencies
  - Set up theme provider with light/dark mode support
[X] Configure TypeScript for type safety
  - TypeScript is configured with the project setup
[X] Set up SQLite with Prisma ORM
  - Prisma installed and configured with SQLite
  - Created database schema with User, UrlGroup, Url, and UserUrlGroup models
[X] Create Docker configuration for development and production
  - Created Dockerfile with multi-stage build
  - Set up docker-compose.yml for easier deployment
  - Added entrypoint script for database migration and server startup
[X] Implement folder structure following Next.js best practices
  - Organized components by feature domain
  - Created necessary directories for app structure

2. Database Design
[X] User table (id, username, password_hash (nullable), is_admin, last_active_url, created_at, updated_at)
[X] URL Groups table (id, name, description, created_at, updated_at)
[X] URLs table (id, url_group_id, title, url, icon_path, display_order, created_at, updated_at)
[X] User-URL Group mapping table (user_id, url_group_id, created_at)

3. Authentication System
[X] Create simplified login page with username selection (no password if not set)
  - Built responsive login page with Material UI components
  - Implemented conditional password field that only appears when needed
[X] Implement conditional password field that appears only when user has password set
  - Created dynamic password field that shows based on user requirements
  - Added password visibility toggle for better UX
[X] Set up session management with JWT stored in HTTP-only cookies
  - Implemented JWT token generation and verification
  - Created secure HTTP-only cookie storage for tokens
  - Added user session persistence
[X] Create protected routes with middleware for authenticated users and admin-only areas
  - Set up Next.js middleware for route protection
  - Added special handling for admin-only routes
  - Created redirect mechanism for unauthenticated users

4. Core UI Components
[X] Design responsive layout with collapsible menu bar for mobile
  - Created app layout with collapsible side navigation for mobile
  - Implemented theme toggle and logout buttons in app bar
[X] Create primary layout component with menu bar and iframe container area
  - Developed AppLayout component with flexible content area
  - Added responsive drawer that collapses on mobile
[X] Implement iframe component with state management and visibility controls
  - Built IframeContainer with loading and error states
  - Implemented hidden iframe caching for multiple URLs
  - Added iframe reset capability for troubleshooting
[X] Build responsive menu bar with active state indicators (underline for active iframe)
  - Created MenuBar component with collapsible URL group sections
  - Added active state indicators for selected URLs
  - Implemented long press functionality for iframe reset

5. Menu & URL System
[X] Create API endpoints for fetching user's assigned URL groups
  - Built endpoint to get all URL groups for a user
  - Implemented appropriate error handling and authorization
[X] Implement API endpoints for URL group management in admin area
  - Created CRUD operations for URL groups (create, read, update, delete)
  - Added endpoints for URL management within groups
  - Implemented display order functionality
[X] Create API endpoints for assigning URL groups to users
  - Built endpoints for assigning/removing URL groups for users
  - Added validation and error handling
[X] Improve existing user URL groups endpoint with proper typing
  - Fixed TypeScript issues in existing endpoint
  - Enhanced error handling
[X] Add click-and-hold functionality to reset iframe src (client-side)
  - Implemented long press detection for mouse and touch events
  - Added explicit reset button for better usability
  - Exposed reset functionality through ref to allow parent component control
[X] Add visual indicators for loaded iframes that are not the active menu item
  - Added badge indicators to show loaded but inactive iframes
  - Exposed loaded URLs state through ref to synchronize UI
  - Implemented polling mechanism to keep UI in sync with iframe state
[X] Implement responsive menu collapse for mobile devices (client-side)
  - Added automatic menu group collapse based on active URL
  - Implemented dynamic group open/close based on screen size
  - Enhanced mobile touch interaction and usability
[X] allow the menu bar to be optionally in the header based on user preferences saved in the user settings
[ ] when the iframe menu bar is in the header, only show 1 group at a time.  when hovering over the group name, display the other groups to select and show all urls in addition to the group names.

6. Iframe Management
[X] Build iframe container system with state persistence
  - Created system to track and manage iframe states
  - Implemented proper unloading/reloading of iframes
  - Added controls for explicitly managing loaded/unloaded states
[X] Implement auto-sizing to eliminate scrollbars
  - Added auto-resize functionality for same-origin iframes
  - Included fallback for cross-origin iframes
  - Added error handling for resize attempts
[X] Create state management for multiple loaded iframes with only one visible
  - Implemented efficient visibility controls for multiple iframes
  - Added state tracking for loaded/unloaded/error states
  - Created system for proper cleanup of unused iframes to save resources
[X] Add loading indicators and error handling for iframe content
  - Added loading spinners for in-progress iframe loads
  - Implemented error alerts with retry options
  - Created user-friendly messages for unloaded content
[ ] Fix iframe reload issue for unloaded active iframes
  - Enhanced detection of active but unloaded iframe state
  - Updated handleUrlClick logic to properly reload unloaded iframes
  - Added clear visual indicators for unloaded iframes with reload functionality
[X] Fix API errors for JWT token cookies
  - Updated JWT functions to properly use async/await with cookies() API
  - Fixed API route handlers to await verifyToken function
[X] remove the scrollbar on the right side of the window

7. Admin Configuration
[X] Build admin dashboard UI with protected route
  - Created admin layout with sidebar navigation
  - Implemented admin dashboard with stats overview
[X] Implement user management (create, edit, delete users)
  - Built user management page with CRUD operations
  - Added password optional toggle for user accounts
  - Implemented admin role toggle
[X] Create password optional toggle for user accounts
  - Added switch in user form to enable/disable password requirement
  - Implemented backend support for users with or without passwords
[X] Develop URL group creation and management
  - Created URL group management interface with accordion view
  - Implemented CRUD operations for URL groups
  - Added URL management within groups with ordering capabilities
[X] Build interface for assigning URL groups to users
  - Added UI for user assignment to URL groups with checkboxes
  - Implemented API endpoints for managing user-group assignments
[X] add users to url groups
  - Created API endpoints for managing users in URL groups
  - Implemented UI for assigning users to URL groups
  - Added functionality to save user assignments
[X] allow uploading an icon for the urls in the url groups
[X] create an application config area, where you can name the application and upload an icon.  the name will be visible in the header, the icon can replace the name in the header.

8. User Settings
[X] create a drop down menu under the username in the header.  it should have links to the admin area (if the user has admin permission) and to the user settings page
  - Added dropdown menu with user avatar and username
  - Included links to settings and admin area (if user is admin)
  - Added logout option to the dropdown menu
[X] Create user settings page for password management
  - Created settings layout with sidebar navigation
  - Implemented password management page with toggle for password protection
  - Added form validation and API endpoint for password updates
[X] Store and restore last active URL for user convenience
  - Updated dashboard page to use the real API endpoint for fetching URL groups
  - Implemented logic to restore the last active URL when loading the page
  - Added fallback to select the first URL if no last active URL is available
[X] Design architecture to support future setting expansions
  - Created a flexible settings type system with support for various setting types
  - Implemented a settings service with CRUD operations for user settings
  - Designed the architecture to be easily extendable for future setting types
[X] add another item on the user dropdown menu to go back to the iframe content view (dashboard)
  - Added Dashboard menu item to the user dropdown
  - Fixed issues with admin area access by adding debugging
[X] allow uploading an image to be the user avatar
  - Added avatarUrl field to the User model in the database
  - Created AvatarUpload component for uploading and displaying avatars
  - Implemented API endpoints for uploading and deleting avatars
  - Added profile settings page with avatar management
[X] add a setting for left side menu bar or top menu bar

9. Login Page
[X] create user tiles instead of needing to type in user names.  for users with passwords, after clicking on their tile, the password field and submit button slides into the tile.
  - Created new API endpoint to fetch all users for login page
  - Implemented user tile grid UI with proper spacing and styling
  - Added animations for tile selection and password field appearance
  - Implemented back button to return to user selection
[X] Create visually appealing login page with application branding
  - Added app logo and name at the top of login page
  - Improved overall design with elevation, spacing, and typography
  - Enhanced visual feedback with animations and transitions
[X] Add smooth transitions and animations for login process
  - Added slide and fade animations for UI transitions
  - Implemented focus management for better user experience
  - Created responsive design for different screen sizes
[X] Implement "remember me" functionality for user convenience
  - Added remember me checkbox that persists user selection
  - Implemented secure localStorage storage for remembered user
  - Added logic to auto-select remembered user on page load
[X] Create clear error messages for authentication failures
  - Enhanced error display with snackbar notifications
  - Improved error message clarity for different failure scenarios
  - Added visual indicators for form validation
[ ] login page should be controled by themes, and set in the admin panel in the application configuration page
Ask before doing these:
[ ] Add password recovery option for users with passwords


10. State Management
[X] Implement client-side state management for active iframe tracking
[X] Create server-side persistence for user preferences
[X] Build efficient state update system for iframe management
[X] Implement URL state synchronization with browser history

11. App initialization
[ ] for first run, when there is no database, initialize the database and create and admin user with no password

12. Performance Optimization
[ ] Optimize iframe loading and switching
[ ] Implement lazy loading for inactive iframe content
[ ] Configure proper caching policies
[ ] Optimize SQLite query performance

13. Containerization
[ ] Configure Docker for Next.js application
[ ] Set up SQLite persistence with Docker volumes
[ ] Create Docker Compose setup for easy deployment
[ ] Implement proper environment variable management for configuration

14. Testing & Deployment
[ ] Create automated tests for authentication and core functionality
[ ] Set up CI/CD pipeline for testing and deployment
[ ] Document deployment procedures
[ ] Implement database backup strategy


